import logging\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\n# Standard library imports\nimport logging\n\n# Third-party imports\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\n# Local application imports\nfrom gatox.github.api import Api\nfrom gatox.github.gql_queries import GqlQueries\nfrom gatox.models.repository import Repository\nfrom gatox.models.organization import Organization\nfrom gatox.cli.output import Output\nfrom gatox.enumerate.repository import RepositoryEnum\nfrom gatox.enumerate.organization import OrganizationEnum\nfrom gatox.enumerate.recommender import Recommender\nfrom gatox.enumerate.ingest.ingest import DataIngestor\nfrom gatox.caching.cache_manager import CacheManager\n\nlogger = logging.getLogger(__name__)\n\nclass Enumerator:\n    \"\"\"Class holding all high-level logic for enumerating GitHub, whether it is\n    a user\'s entire access, individual organizations, or repositories.\n    \"\"\"\n\n    def __init__(\n        self,\n        pat: str,\n        socks_proxy: str = None,\n        http_proxy: str = None,\n        output_yaml: str = None,\n        skip_log: bool = False,\n        github_url: str = None,\n        output_json: str = None,\n    ) -> None:\n        \"\"\"Initialize enumeration class with arguments sent by user.\n\n        Args:\n            pat (str): GitHub personal access token\n            socks_proxy (str, optional): Proxy settings for SOCKS proxy. Defaults to None.\n            http_proxy (str, optional): Proxy settings for HTTP proxy. Defaults to None.\n            output_yaml (str, optional): Directory to save all yml files to. Defaults to None.\n            skip_log (bool, optional): If set, then run logs will not be downloaded. Defaults to False.\n            github_url (str, optional): GitHub URL. Defaults to None.\n            output_json (str, optional): JSON file to output enumeration results. Defaults to None.\n        \"\"\"\n        self.api = Api(\n            pat,\n            socks_proxy=socks_proxy,\n            http_proxy=http_proxy,\n            github_url=github_url,\n        )\n\n        self.socks_proxy = socks_proxy\n        self.http_proxy = http_proxy\n        self.skip_log = skip_log\n        self.output_yaml = output_yaml\n        self.github_url = github_url\n        self.output_json = output_json\n        self._user_permissions = None\n\n        self._repository_enumerator = RepositoryEnum(self.api, skip_log, output_yaml)\n        self._organization_enumerator = OrganizationEnum(self.api)\n\n    def _setup_user_info(self) -> bool:\n        \"\"\"Sets up user/app token information.\n\n        Returns:\n            bool: True if user info is successfully set, False otherwise.\n        \"\"\"\n        if not self._user_permissions:\n            if self.api.is_app_token():\n                installation_info = self.api.get_installation_repos()\n                if installation_info and installation_info[\'total_count\']:\n                    Output.info(\"Gato-X is using a valid GitHub App installation token!")\n                    self._user_permissions = {\n                        \'user\': \'Github App\',\n                        \'scopes\': [],\n                        \'name\': \'GATO-X App Mode\',\n                    }\n                    return True\n                else:\n                    Output.error(\"No repositories found with this GitHub App installation token!")\n                    return False\n\n            self._user_permissions = self.api.check_user()\n            if not self._user_permissions:\n                Output.error(\"This token cannot be used for enumeration!")\n                return False\n\n            Output.info(\n                \