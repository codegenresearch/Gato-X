import logging\nfrom gatox.github.api import Api\nfrom gatox.models.repository import Repository\nfrom gatox.models.organization import Organization\nfrom gatox.enumerate.repository import RepositoryEnum\nfrom gatox.enumerate.organization import OrganizationEnum\nfrom gatox.enumerate.recommender import Recommender\nfrom gatox.caching.cache_manager import CacheManager\n\nlogger = logging.getLogger(__name__)\n\nclass Enumerator:\n    \"""Class holding all high level logic for enumerating GitHub, whether it is\n    a user's entire access, individual organizations, or repositories.\n    \"""\n\n    def __init__(\n        self,\n        pat: str,\n        socks_proxy: str = None,\n        http_proxy: str = None,\n        output_yaml: str = None,\n        skip_log: bool = False,\n        github_url: str = None,\n        output_json: str = None\n    ):\n        \"""Initialize enumeration class with arguments sent by user.\n\n        Args:\n            pat (str): GitHub personal access token\n            socks_proxy (str, optional): Proxy settings for SOCKS proxy.\n            Defaults to None.\n            http_proxy (str, optional): Proxy gettings for HTTP proxy.\n            Defaults to None.\n            output_yaml (str, optional): If set, directory to save all yml\n            files to . Defaults to None.\n            skip_log (bool, optional): If set, then run logs will not be\n            downloaded.\n            output_json (str, optional): JSON file to output enumeration\n            results.\n        \"""\n        self.api = Api(\n            pat,\n            socks_proxy=socks_proxy,\n            http_proxy=http_proxy,\n            github_url=github_url,\n        )\n\n        self.socks_proxy = socks_proxy\n        self.http_proxy = http_proxy\n        self.skip_log = skip_log\n        self.output_yaml = output_yaml\n        self.user_perms = None\n        self.github_url = github_url\n        self.output_json = output_json\n\n        self.repo_e = RepositoryEnum(self.api, skip_log, output_yaml)\n        self.org_e = OrganizationEnum(self.api)\n\n    def __setup_user_info(self):\n        if not self.user_perms:\n            try:\n                self.user_perms = self.api.check_user()\n                if not self.user_perms:\n                    logger.error(\