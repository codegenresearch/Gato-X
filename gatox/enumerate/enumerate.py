import logging\nimport time\n\nfrom gatox.github.api import Api, GqlQueries\nfrom gatox.models.repository import Repository, Secret, Runner\nfrom gatox.models.organization import Organization\nfrom gatox.cli.output import Output\nfrom gatox.enumerate.repository import RepositoryEnum\nfrom gatox.enumerate.organization import OrganizationEnum\nfrom gatox.enumerate.recommender import Recommender\nfrom gatox.enumerate.ingest.ingest import DataIngestor\nfrom gatox.caching.cache_manager import CacheManager\n\nlogger = logging.getLogger(__name__)\n\nclass Enumerator:\n    """Class holding all high level logic for enumerating GitHub, whether it is\n    a user's entire access, individual organizations, or repositories.\n    """\n\n    def __init__(\n        self,\n        pat: str,\n        socks_proxy: str = None,\n        http_proxy: str = None,\n        output_yaml: str = None,\n        skip_log: bool = False,\n        github_url: str = None,\n        output_json: str = None\n    ) -> None:\n        """Initialize enumeration class with arguments sent by user.\n\n        Args:\n            pat (str): GitHub personal access token\n            socks_proxy (str, optional): Proxy settings for SOCKS proxy.\n                Defaults to None.\n            http_proxy (str, optional): Proxy settings for HTTP proxy.\n                Defaults to None.\n            output_yaml (str, optional): If set, directory to save all yml\n                files to. Defaults to None.\n            skip_log (bool, optional): If set, then run logs will not be\n                downloaded. Defaults to False.\n            github_url (str, optional): GitHub API URL. Defaults to None.\n            output_json (str, optional): JSON file to output enumeration\n                results. Defaults to None.\n        """\n        self.api = Api(\n            pat,\n            socks_proxy=socks_proxy,\n            http_proxy=http_proxy,\n            github_url=github_url,\n        )\n\n        self.socks_proxy = socks_proxy\n        self.http_proxy = http_proxy\n        self.skip_log = skip_log\n        self.output_yaml = output_yaml\n        self.user_perms = None\n        self.github_url = github_url\n        self.output_json = output_json\n\n        self.repo_e = RepositoryEnum(self.api, skip_log, output_yaml)\n        self.org_e = OrganizationEnum(self.api)\n\n    def __setup_user_info(self) -> bool:\n        """Set up user information and check permissions.\n\n        Returns:\n            bool: True if user info is successfully set up, False otherwise.\n        """\n        if not self.user_perms:\n            self.user_perms = self.api.check_user()\n            if not self.user_perms:\n                Output.error(\