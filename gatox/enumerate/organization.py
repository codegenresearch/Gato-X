from typing import List, Dict, Optional, Union from multiprocessing import Process from gatox.models.organization import Organization from gatox.models.repository import Repository from gatox.models.secret import Secret from gatox.models.runner import Runner from gatox.github.api import Api class OrganizationEnum:     """Helper class to wrap organization specific enumeration functionality.     """     def __init__(self, api):         """Simple init method.          Args:             api: Instantiated GitHub API wrapper object.         """         self.api = api      def __assemble_repo_list(self, organization, visibilities):         """Get a list of repositories that match the visibility types.          Args:             organization: Name of the organization.             visibilities: List of visibilities (public, private, etc)          Returns:             List of repositories matching the visibility types.         """         repos = []         for visibility in visibilities:             raw_repos = self.api.check_org_repos(organization, visibility)             if raw_repos:                 repos.extend([Repository(repo) for repo in raw_repos])         return repos      def construct_repo_enum_list(self, organization):         """Constructs a list of repositories that a user has access to within         an organization.          Args:             organization: Organization wrapper object.          Returns:             List of repositories to enumerate.         """         visibilities = ['private', 'internal', 'public']         repos = self.__assemble_repo_list(organization.name, visibilities)          private_repos = [repo for repo in repos if repo.visibility in ['private', 'internal']]         public_repos = [repo for repo in repos if repo.visibility == 'public']          if private_repos:             sso_enabled = self.api.validate_sso(organization.name, private_repos[0].name)             organization.sso_enabled = sso_enabled         else:             sso_enabled = False          organization.set_public_repos(public_repos)         organization.set_private_repos(private_repos)         organization.set_sso_enabled(sso_enabled)          return repos if sso_enabled else public_repos      def admin_enum(self, organization):         """Enumeration tasks to perform if the user is an org admin and the         token has the necessary scopes.         """         if organization.org_admin_scopes and organization.org_admin_user:             runners = self.api.check_org_runners(organization.name)             if runners:                 org_runners = [                     Runner(                         runner['name'],                         machine_name=None,                         os=runner['os'],                         status=runner['status'],                         labels=runner['labels'],                         token_permissions=runner.get('token_permissions', {}),                         runner_group=runner.get('runner_group', None),                         requested_labels=runner.get('requested_labels', [])                     ) for runner in runners['runners']                 ]                 organization.set_runners(org_runners)              org_secrets = self.api.get_org_secrets(organization.name)             if org_secrets:                 org_secrets = [                     Secret(secret, organization.name) for secret in org_secrets                 ]                 organization.set_secrets(org_secrets)