from typing import List from multiprocessing import Process from gatox.models.organization import Organization from gatox.models.repository import Repository from gatox.models.secret import Secret from gatox.models.runner import Runner from gatox.github.api import Api class OrganizationEnum:     """Helper class to wrap organization specific enumeration functionality.     """     def __init__(self, api: Api):         """Simple init method.          Args:             api (Api): Instantiated GitHub API wrapper object.         """         self.api = api      def __assemble_repo_list(self, organization: str, visibility: str) -> List[Repository]:         """Get a list of repositories that match the visibility type.          Args:             organization (str): Name of the organization.             visibility (str): Visibility type (public, private, etc).          Returns:             List[Repository]: List of repositories matching the visibility type.         """         raw_repos = self.api.check_org_repos(organization, visibility)         return [Repository(repo) for repo in raw_repos] if raw_repos else []      def construct_repo_enum_list(self, organization: Organization) -> List[Repository]:         """Constructs a list of repositories that a user has access to within         an organization.          Args:             organization (Organization): Organization wrapper object.          Returns:             List[Repository]: List of repositories to enumerate.         """         org_private_repos = self.__assemble_repo_list(organization.name, 'private')         org_internal_repos = self.__assemble_repo_list(organization.name, 'internal')         org_public_repos = self.__assemble_repo_list(organization.name, 'public')          all_private_repos = org_private_repos + org_internal_repos          if all_private_repos:             sso_enabled = self.api.validate_sso(organization.name, all_private_repos[0].name)             organization.sso_enabled = sso_enabled         else:             sso_enabled = False          organization.set_public_repos(org_public_repos)         organization.set_private_repos(all_private_repos)         organization.set_sso_enabled(sso_enabled)          if sso_enabled:             return all_private_repos + org_public_repos         else:             return org_public_repos      def admin_enum(self, organization: Organization):         """Enumeration tasks to perform if the user is an org admin and the         token has the necessary scopes.         """         if organization.org_admin_scopes and organization.org_admin_user:             runners = self.api.check_org_runners(organization.name)             if runners:                 org_runners = [                     Runner(                         runner['name'],                         machine_name=None,                         os=runner['os'],                         status=runner['status'],                         labels=runner['labels'],                         token_permissions=runner.get('token_permissions', {}),                         runner_group=runner.get('runner_group', None),                         requested_labels=runner.get('requested_labels', [])                     ) for runner in runners['runners']                 ]                 organization.set_runners(org_runners)              org_secrets = self.api.get_org_secrets(organization.name)             if org_secrets:                 org_secrets = [                     Secret(secret, organization.name) for secret in org_secrets                 ]                 organization.set_secrets(org_secrets)