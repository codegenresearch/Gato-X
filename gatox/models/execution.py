import datetime\nfrom gatox.models.organization import Organization\nfrom gatox.models.repository import Repository\n\nclass Execution:\n    """Wrapper class to provide accessor methods against a full Gato execution run."""\n\n    def __init__(self):\n        """Initialize wrapper class."""\n        self.user_details = None\n        self.organizations: list[Organization] = []\n        self.repositories: list[Repository] = []\n        self.timestamp = datetime.datetime.now()\n\n    def add_organizations(self, organizations: list[Organization]):\n        """Add list of organization wrapper objects.\n\n        Args:\n            organizations (List[Organization]): List of org wrappers.\n        """\n        self.organizations = organizations\n\n    def add_repositories(self, repositories: list[Repository]):\n        """Add list of repository wrapper objects.\n\n        Args:\n            repositories (List[Repository]): List of repo wrappers.\n        """\n        self.repositories = repositories\n\n    def set_user_details(self, user_details: dict):\n        """Set user details.\n\n        Args:\n            user_details (dict): Details about the user's permissions.\n        """\n        self.user_details = user_details\n\n    def toJSON(self) -> dict:\n        """Converts the run to Gato JSON representation.\n\n        Returns:\n            dict: JSON representation of the execution run.\n        """\n        if self.user_details:\n            representation = {\n                "username": self.user_details.get("user"),\n                "scopes": self.user_details.get("scopes"),\n                "enumeration": {\n                    "timestamp": self.timestamp.ctime(),\n                    "organizations": [\n                        organization.toJSON() for organization in self.organizations\n                    ],\n                    "repositories": [\n                        repository.toJSON() for repository in self.repositories\n                    ],\n                },\n            }\n\n            return representation\n        return {}\n