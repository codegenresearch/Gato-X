from gatox.models.runner import Runner\nfrom gatox.models.repository import Repository\nfrom gatox.models.secret import Secret\n\nclass Organization():\n    def __init__(self, org_data: dict, user_scopes: list, limited_data: bool = False):\n        self.name = org_data['login']\n        self.org_admin_user = False\n        self.org_admin_scopes = False\n        self.org_member = False\n        self.secrets: list[Secret] = []\n        self.runners: list[Runner] = []\n        self.sso_enabled = False\n        self.limited_data = limited_data\n        self.public_repos = []\n        self.private_repos = []\n\n        if 'billing_email' in org_data and org_data['billing_email'] is not None:\n            if 'admin:org' in user_scopes:\n                self.org_admin_scopes = True\n            self.org_admin_user = True\n            self.org_member = True\n        elif 'billing_email' in org_data:\n            self.org_admin_user = False\n            self.org_member = True\n        else:\n            self.org_admin_user = False\n            self.org_member = False\n\n    def set_secrets(self, secrets: list[Secret]):\n        self.secrets = secrets\n\n    def set_public_repos(self, repos: list[Repository]):\n        self.public_repos = repos\n\n    def set_private_repos(self, repos: list[Repository]):\n        self.private_repos = repos\n\n    def set_runners(self, runners: list[Runner]):\n        self.runners = runners\n\n    def toJSON(self):\n        if self.limited_data:\n            return {"name": self.name}\n        else:\n            return {\n                "name": self.name,\n                "org_admin_user": self.org_admin_user,\n                "org_member": self.org_member,\n                "org_runners": [runner.toJSON() for runner in self.runners],\n                "org_secrets": [secret.toJSON() for secret in self.secrets],\n                "sso_access": self.sso_enabled,\n                "public_repos": [repo.toJSON() for repo in self.public_repos],\n                "private_repos": [repo.toJSON() for repo in self.private_repos]\n            }