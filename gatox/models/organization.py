from gatox.models.runner import Runner\nfrom gatox.models.repository import Repository\nfrom gatox.models.secret import Secret\n\nclass Organization():\n    """Wrapper object for an organization.\n\n    Args:\n        org_data (dict): Org data from GitHub API\n        user_scopes (list): List of OAuth scopes that the PAT has\n        limited_data (bool): Whether limited org_data is present (default: False)\n    """\n    def __init__(self, org_data: dict, user_scopes: list, limited_data: bool = False):\n        self.name = None\n        self.org_admin_user = False\n        self.org_admin_scopes = False\n        self.org_member = False\n        self.secrets: list[Secret] = []\n        self.runners: list[Runner] = []\n        self.sso_enabled = False\n\n        self.limited_data = limited_data\n\n        self.public_repos = []\n        self.private_repos = []\n\n        self.name = org_data['login']\n\n        # If fields such as billing email are populated, then the user MUST\n        # be an organization owner. If not, then the user is a member (for\n        # private repos) or\n        if "billing_email" in org_data and \\