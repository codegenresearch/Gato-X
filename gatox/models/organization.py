from gatox.models.runner import Runner\nfrom gatox.models.repository import Repository\nfrom gatox.models.secret import Secret\nfrom typing import List\n\nclass Organization():\n    \n    def __init__(self, org_data: dict, user_scopes: List[str], limited_data: bool = False):\n        self.name = org_data['login']\n        self.org_admin_user = 'billing_email' in org_data and org_data['billing_email'] is not None\n        self.org_admin_scopes = 'admin:org' in user_scopes\n        self.org_member = self.org_admin_user or 'billing_email' in org_data\n        self.secrets: List[Secret] = []\n        self.runners: List[Runner] = []\n        self.sso_enabled = False\n        self.limited_data = limited_data\n        self.public_repos: List[Repository] = []\n        self.private_repos: List[Repository] = []\n\n    def set_secrets(self, secrets: List[Secret]):\n        self.secrets = secrets\n\n    def set_public_repos(self, repos: List[Repository]):\n        self.public_repos = repos\n\n    def set_private_repos(self, repos: List[Repository]):\n        self.private_repos = repos\n\n    def set_runners(self, runners: List[Runner]):\n        self.runners = runners\n\n    def toJSON(self):\n        if self.limited_data:\n            return {'name': self.name}\n        else:\n            return {\n                'name': self.name,\n                'org_admin_user': self.org_admin_user,\n                'org_member': self.org_member,\n                'org_runners': [runner.toJSON() for runner in self.runners],\n                'org_secrets': [secret.toJSON() for secret in self.secrets],\n                'sso_access': self.sso_enabled,\n                'public_repos': [repo.toJSON() for repo in self.public_repos],\n                'private_repos': [repo.toJSON() for repo in self.private_repos]\n            }\n