from gatox.models.runner import Runner\nfrom gatox.models.repository import Repository\nfrom gatox.models.secret import Secret\n\nclass Organization():\n    def __init__(self, org_data: dict, user_scopes: list, limited_data: bool = False):\n        """Wrapper object for an organization.\n\n        Args:\n            org_data (dict): Org data from GitHub API\n            user_scopes (list): List of OAuth scopes that the PAT has\n            limited_data (bool): Whether limited org_data is present (default: False)\n        """\n        self.name = None\n        self.org_admin_user = False\n        self.org_admin_scopes = False\n        self.org_member = False\n        self.secrets: list[Secret] = []\n        self.runners: list[Runner] = []\n        self.sso_enabled = False\n\n        self.limited_data = limited_data\n\n        self.public_repos = []\n        self.private_repos = []\n\n        self.name = org_data['login']\n\n        # Determine if the user is an admin or member based on org_data\n        # If the billing email is present and not None, the user is likely an admin\n        if ("billing_email" in org_data and\n                org_data["billing_email"] is not None):\n            if "admin:org" in user_scopes:\n                self.org_admin_scopes = True\n            self.org_admin_user = True\n            self.org_member = True\n        # If the billing email is present but None, the user is a member\n        elif "billing_email" in org_data:\n            self.org_admin_user = False\n            self.org_member = True\n        # If the billing email is not present, the user is neither an admin nor a member\n        else:\n            self.org_admin_user = False\n            self.org_member = False\n\n    def set_secrets(self, secrets: list[Secret]):\n        """Set repo-level secrets.\n\n        Args:\n            secrets (list): List of secrets at the organization level.\n        """\n        self.secrets = secrets\n\n    def set_repository(self, repo: Repository):\n        """Add a single repository to the organization.\n\n        Args:\n            repo (Repository): Repository wrapper object.\n        """\n        if repo.is_private():\n            self.private_repos.append(repo)\n        else:\n            self.public_repos.append(repo)\n\n    def set_public_repos(self, repos: list[Repository]):\n        """List of public repos for the org.\n\n        Args:\n            repos (List[Repository]): List of Repository wrapper objects.\n        """\n        self.public_repos = repos\n\n    def set_private_repos(self, repos: list[Repository]):\n        """List of private repos for the org.\n\n        Args:\n            repos (List[Repository]): List of Repository wrapper objects.\n        """\n        self.private_repos = repos\n\n    def set_runners(self, runners: list[Runner]):\n        """Set a list of runners that the organization can access.\n\n        Args:\n            runners (List[Runner]): List of runners that are attached to the\n            organization.\n        """\n        self.runners = runners\n\n    def toJSON(self):\n        """Converts the organization to a Gato JSON representation.\n        """\n        if self.limited_data:\n            representation = {\n                "name": self.name\n            }\n        else:\n            representation = {\n                "name": self.name,\n                "org_admin_user": self.org_admin_user,\n                "org_member": self.org_member,\n                "org_runners": [runner.toJSON() for runner in self.runners],\n                "org_secrets": [secret.toJSON() for secret in self.secrets],\n                "sso_access": self.sso_enabled,\n                "public_repos": [repository.toJSON() for repository in self.public_repos],\n                "private_repos": [repository.toJSON() for repository in self.private_repos]\n            }\n\n        return representation\n