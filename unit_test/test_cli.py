import pytest\nimport os\nimport pathlib\nfrom unittest import mock\nfrom gatox.cli import cli\nfrom gatox.util.arg_utils import read_file_and_validate_lines, is_valid_directory\nfrom gatox.enumerate.enumerate import repo_wrappers\n\nrepo_wrappers()\n\n@pytest.fixture(autouse=True)\ndef mock_settings_env_vars(request):\n    with mock.patch.dict(\n        os.environ, {"GH_TOKEN": "ghp_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"}\n    ):\n        yield\n\ndef test_cli_no_gh_token(capfd):\n    """Test case where no GH Token is provided"""\n    del os.environ["GH_TOKEN"]\n    with pytest.raises(OSError):\n        cli.cli(["enumerate", "-t", "test"])\n    out, err = capfd.readouterr()\n    assert "Please enter" in out\n\ndef test_cli_fine_grained_pat(capfd):\n    """Test case where an unsupported PAT is provided."""\n    os.environ["GH_TOKEN"] = "github_pat_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"\n    with pytest.raises(SystemExit):\n        cli.cli(["enumerate", "-t", "test"])\n    out, err = capfd.readouterr()\n    assert "not supported" in err\n\ndef test_cli_s2s_token(capfd):\n    """Test case where a service-to-service token is provided."""\n    os.environ["GH_TOKEN"] = "ghs_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"\n    with pytest.raises(SystemExit):\n        cli.cli(["enumerate", "-t", "test"])\n    out, err = capfd.readouterr()\n    assert "not support App tokens without machine flag" in err\n\ndef test_cli_s2s_token_no_machine(capfd):\n    """Test case where a service-to-service token is provided."""\n    os.environ["GH_TOKEN"] = "ghs_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"\n    with pytest.raises(SystemExit):\n        cli.cli(["enumerate", "-r", "testOrg/testRepo"])\n    out, err = capfd.readouterr()\n    assert "not support App tokens without machine flag" in err\n\ndef test_cli_s2s_token_machine(capfd):\n    """Test case where a service-to-service token is provided."""\n    os.environ["GH_TOKEN"] = "ghs_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"\n    cli.cli(["enumerate", "-r", "testOrg/testRepo", "--machine"])\n    out, err = capfd.readouterr()\n    assert "Allowing the use of a GitHub App token for single repo enumeration" in out\n\ndef test_cli_u2s_token(capfd):\n    """Test case where a service-to-service token is provided."""\n    os.environ["GH_TOKEN"] = "ghu_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"\n    with pytest.raises(SystemExit):\n        cli.cli(["enumerate", "-t", "test"])\n    out, err = capfd.readouterr()\n    assert "Provided GitHub PAT is malformed or unsupported" in err\n\n@mock.patch("gatox.cli.cli.Enumerator")\ndef test_cli_oauth_token(mock_enumerate, capfd):\n    """Test case where a GitHub oauth token is provided."""\n    os.environ["GH_TOKEN"] = "gho_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"\n    mock_instance = mock_enumerate.return_value.api = mock.MagicMock()\n    mock_instance.check_user.return_value = {\